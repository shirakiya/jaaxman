pip:
  restore_cache: &pip_restore_cache
    keys:
      - pip-v1-{{ .Branch }}-{{ checksum "backend/requirements-dev.txt" }}-{{ checksum "backend/requirements.txt" }}
      - pip-v1-{{ .Branch }}-
      - pip-v1-

  install:  &pip_install
    name: Install pip packages
    command: |
      python3 -m venv ~/venv
      . ~/venv/bin/activate
      pip install -r backend/requirements-dev.txt

  save_cache: &pip_save_cache
    key: pip-v1-{{ .Branch }}-{{ checksum "backend/requirements-dev.txt" }}-{{ checksum "backend/requirements.txt" }}
    paths:
      - ~/venv

npm:
  restore_cache: &npm_restore_cache
    keys:
      - npm-v1-{{ .Branch }}-{{ checksum "frontend/package.json" }}
      - npm-v1-{{ .Branch }}-
      - npm-v1-

  install: &npm_install
    name: Install npm modules
    command: |
      cd frontend/
      npm install

  save_cache: &npm_save_cache
    key: npm-v1-{{ .Branch }}-{{ checksum "frontend/package.json" }}
    paths:
      - ./forntend/node_modules


version: 2.1
executors:
  python:
    docker:
      - image: circleci/python:3.6.2
    working_directory: ~/jaaxman
  nodejs:
    docker:
      - image: circleci/node:8.12.0
    working_directory: ~/jaaxman
jobs:
  python-test:
    executor: python
    docker:
      - image: circleci/python:3.6.2
        environment:
          RUN_MODE: test
          MYSQL_USER: root
          MYSQL_PASSWORD: ""
          MYSQL_HOST: 127.0.0.1
          GOOGLE_API_KEY: ""
      - image: mysql:5.6
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
    steps:
      - checkout
      - restore_cache:
          <<: *pip_restore_cache
      - run:
          <<: *pip_install
      - save_cache:
          <<: *pip_save_cache
      - run:
          name: Run tests
          command: |
            . ~/venv/bin/activate
            sleep 5s
            cd backend/
            coverage run manage.py test
      - run:
          name: Report coverage
          command: |
            . ~/venv/bin/activate
            cd backend/
            coverage report

  flake8:
    executor: python
    steps:
      - checkout
      - restore_cache:
          <<: *pip_restore_cache
      - run:
          <<: *pip_install
      - save_cache:
          <<: *pip_save_cache
      - run:
          name: Run flake8
          command: |
            . ~/venv/bin/activate
            flake8 ./backend

  build-assets:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          <<: *npm_restore_cache
      - run:
          <<: *npm_install
      - save_cache:
          <<: *npm_save_cache
      - run:
          name: Build assets
          command: |
            cd frontend/
            npm run build:production
      - persist_to_workspace:
          root: ./backend/app/static/dist
          paths:
            - ./*

  build-images:
    executor: python
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ./backend/app/static/dist
      - run:
          name: Prepare to build images
          command: |
            mkdir docker_images
            echo 'export ECR_REPOSITORY_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/jaaxman"' >> $BASH_ENV
      - run:
          name: Build backend images
          command: |
            IMAGE_NAME=${ECR_REPOSITORY_NAME}/backend:${CIRCLE_SHA1}
            docker build ./backend -f ./backend/Dockerfile -t $IMAGE_NAME
            docker save -o docker_images/backend.tar $IMAGE_NAME
      - run:
          name: Build nginx images
          command: |
            IMAGE_NAME=${ECR_REPOSITORY_NAME}/nginx:${CIRCLE_SHA1}
            docker build ./backend -f ./backend/Dockerfile.nginx -t $IMAGE_NAME
            docker save -o docker_images/nginx.tar $IMAGE_NAME
      - persist_to_workspace:
          root: ./docker_images
          paths:
            - ./*

  push-assets:
    executor: python
    steps:
      - checkout
      - restore_cache:
          <<: *pip_restore_cache
      - run:
          <<: *pip_install
      - attach_workspace:
          at: ./backend/app/static/dist
      - run:
          name: Install extra pip packages to push assets
          command: |
            . ~/venv/bin/activate
            pip install awscli
      - run:
          name: Send assets to S3
          command: |
            . ~/venv/bin/activate
            aws s3 sync ./backend/app/static/dist/ s3://jaaxman-production-public/js/bundle/ --exclude=manifest.json --exclude=*.tar*

  push-images:
    executor: python
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: docker_images
      - restore_cache:
          <<: *pip_restore_cache
      - run:
          name: Install extra pip packages to push images
          command: |
            . ~/venv/bin/activate
            pip install awscli
      - run:
          name: Load images
          command: |
            docker load --input ./docker_images/backend.tar
            docker load --input ./docker_images/nginx.tar
      - run:
          name: Push images
          command: |
            . ~/venv/bin/activate
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/jaaxman/backend:$CIRCLE_SHA1
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/jaaxman/nginx:$CIRCLE_SHA1

  deploy:
    executor: python
    steps:
      - checkout
      - restore_cache:
          <<: *pip_restore_cache
      - run:
          <<: *pip_install
      - run:
          name: Deploy
          command: |
            . ~/venv/bin/activate
            BACKEND_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/jaaxman/backend:$CIRCLE_SHA1
            NGINX_IMAGE=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/jaaxman/nginx:$CIRCLE_SHA1
            ./scripts/deploy.py $BACKEND_IMAGE $NGINX_IMAGE

workflows:
  version: 2
  test-and-build:
    jobs:
      - python-test
      - flake8
      - build-assets:
          requires:
            - python-test
            - flake8
          filters:
            branches:
              only:
                - production
                - feature/ecs
      - build-images:
          context: shirakiya-IAM-CircleCI-user
          requires:
            - build-assets
      - push-assets:
          context: shirakiya-IAM-CircleCI-user
          requires:
            - build-images
      - push-images:
          context: shirakiya-IAM-CircleCI-user
          requires:
            - build-images
      - deploy:
          context: shirakiya-IAM-CircleCI-user
          requires:
            - push-assets
            - push-images
